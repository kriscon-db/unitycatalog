/*
 * Unity Catalog API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.unitycatalog.client.api;

import io.unitycatalog.client.ApiClient;
import io.unitycatalog.client.ApiException;
import io.unitycatalog.client.ApiResponse;
import io.unitycatalog.client.Pair;

import io.unitycatalog.client.model.CreateModelVersion;
import io.unitycatalog.client.model.FinalizeModelVersion;
import io.unitycatalog.client.model.ListModelVersionsResponse;
import io.unitycatalog.client.model.ModelVersionInfo;
import io.unitycatalog.client.model.UpdateModelVersion;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class ModelVersionsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ModelVersionsApi() {
    this(new ApiClient());
  }

  public ModelVersionsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create a model version. WARNING: This API is experimental and will change in future versions. 
   * Creates a new model version instance. WARNING: This API is experimental and will change in future versions. 
   * @param createModelVersion  (optional)
   * @return ModelVersionInfo
   * @throws ApiException if fails to make API call
   */
  public ModelVersionInfo createModelVersion(CreateModelVersion createModelVersion) throws ApiException {
    ApiResponse<ModelVersionInfo> localVarResponse = createModelVersionWithHttpInfo(createModelVersion);
    return localVarResponse.getData();
  }

  /**
   * Create a model version. WARNING: This API is experimental and will change in future versions. 
   * Creates a new model version instance. WARNING: This API is experimental and will change in future versions. 
   * @param createModelVersion  (optional)
   * @return ApiResponse&lt;ModelVersionInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelVersionInfo> createModelVersionWithHttpInfo(CreateModelVersion createModelVersion) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createModelVersionRequestBuilder(createModelVersion);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createModelVersion", localVarResponse);
        }
        return new ApiResponse<ModelVersionInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelVersionInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createModelVersionRequestBuilder(CreateModelVersion createModelVersion) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/models/versions";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createModelVersion);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete a model version
   * Deletes a model version from the specified model. 
   * @param fullName Full name of the model. (required)
   * @param version Version number of the model version. (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteModelVersion(String fullName, String version) throws ApiException {
    ApiResponse<Object> localVarResponse = deleteModelVersionWithHttpInfo(fullName, version);
    return localVarResponse.getData();
  }

  /**
   * Delete a model version
   * Deletes a model version from the specified model. 
   * @param fullName Full name of the model. (required)
   * @param version Version number of the model version. (required)
   * @return ApiResponse&lt;Object&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Object> deleteModelVersionWithHttpInfo(String fullName, String version) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteModelVersionRequestBuilder(fullName, version);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteModelVersion", localVarResponse);
        }
        return new ApiResponse<Object>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteModelVersionRequestBuilder(String fullName, String version) throws ApiException {
    // verify the required parameter 'fullName' is set
    if (fullName == null) {
      throw new ApiException(400, "Missing the required parameter 'fullName' when calling deleteModelVersion");
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling deleteModelVersion");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/models/{full_name}/versions/{version}"
        .replace("{full_name}", ApiClient.urlEncode(fullName.toString()))
        .replace("{version}", ApiClient.urlEncode(version.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Finalize a model version
   * Finalizes the status of the model version that matches the supplied model name and version. 
   * @param fullName Full name of the model. (required)
   * @param version Version number of the model version. (required)
   * @param finalizeModelVersion  (optional)
   * @return ModelVersionInfo
   * @throws ApiException if fails to make API call
   */
  public ModelVersionInfo finalizeModelVersion(String fullName, String version, FinalizeModelVersion finalizeModelVersion) throws ApiException {
    ApiResponse<ModelVersionInfo> localVarResponse = finalizeModelVersionWithHttpInfo(fullName, version, finalizeModelVersion);
    return localVarResponse.getData();
  }

  /**
   * Finalize a model version
   * Finalizes the status of the model version that matches the supplied model name and version. 
   * @param fullName Full name of the model. (required)
   * @param version Version number of the model version. (required)
   * @param finalizeModelVersion  (optional)
   * @return ApiResponse&lt;ModelVersionInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelVersionInfo> finalizeModelVersionWithHttpInfo(String fullName, String version, FinalizeModelVersion finalizeModelVersion) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = finalizeModelVersionRequestBuilder(fullName, version, finalizeModelVersion);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("finalizeModelVersion", localVarResponse);
        }
        return new ApiResponse<ModelVersionInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelVersionInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder finalizeModelVersionRequestBuilder(String fullName, String version, FinalizeModelVersion finalizeModelVersion) throws ApiException {
    // verify the required parameter 'fullName' is set
    if (fullName == null) {
      throw new ApiException(400, "Missing the required parameter 'fullName' when calling finalizeModelVersion");
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling finalizeModelVersion");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/models/{full_name}/versions/{version}/finalize"
        .replace("{full_name}", ApiClient.urlEncode(fullName.toString()))
        .replace("{version}", ApiClient.urlEncode(version.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(finalizeModelVersion);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get a model version
   * Gets a specific model version for a specific model. 
   * @param fullName Full name of the model. (required)
   * @param version Version number of the model version. (required)
   * @return ModelVersionInfo
   * @throws ApiException if fails to make API call
   */
  public ModelVersionInfo getModelVersion(String fullName, String version) throws ApiException {
    ApiResponse<ModelVersionInfo> localVarResponse = getModelVersionWithHttpInfo(fullName, version);
    return localVarResponse.getData();
  }

  /**
   * Get a model version
   * Gets a specific model version for a specific model. 
   * @param fullName Full name of the model. (required)
   * @param version Version number of the model version. (required)
   * @return ApiResponse&lt;ModelVersionInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelVersionInfo> getModelVersionWithHttpInfo(String fullName, String version) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getModelVersionRequestBuilder(fullName, version);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getModelVersion", localVarResponse);
        }
        return new ApiResponse<ModelVersionInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelVersionInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getModelVersionRequestBuilder(String fullName, String version) throws ApiException {
    // verify the required parameter 'fullName' is set
    if (fullName == null) {
      throw new ApiException(400, "Missing the required parameter 'fullName' when calling getModelVersion");
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling getModelVersion");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/models/{full_name}/versions/{version}"
        .replace("{full_name}", ApiClient.urlEncode(fullName.toString()))
        .replace("{version}", ApiClient.urlEncode(version.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List model versions
   * Gets the list of all available model versions under the model. There is no guarantee of a specific ordering of the elements in the array. 
   * @param fullName Full name of the model. (required)
   * @return ListModelVersionsResponse
   * @throws ApiException if fails to make API call
   */
  public ListModelVersionsResponse listModelVersions(String fullName) throws ApiException {
    ApiResponse<ListModelVersionsResponse> localVarResponse = listModelVersionsWithHttpInfo(fullName);
    return localVarResponse.getData();
  }

  /**
   * List model versions
   * Gets the list of all available model versions under the model. There is no guarantee of a specific ordering of the elements in the array. 
   * @param fullName Full name of the model. (required)
   * @return ApiResponse&lt;ListModelVersionsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListModelVersionsResponse> listModelVersionsWithHttpInfo(String fullName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listModelVersionsRequestBuilder(fullName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listModelVersions", localVarResponse);
        }
        return new ApiResponse<ListModelVersionsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListModelVersionsResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listModelVersionsRequestBuilder(String fullName) throws ApiException {
    // verify the required parameter 'fullName' is set
    if (fullName == null) {
      throw new ApiException(400, "Missing the required parameter 'fullName' when calling listModelVersions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/models/{full_name}/versions"
        .replace("{full_name}", ApiClient.urlEncode(fullName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a model version
   * Updates the model version that matches the supplied name. 
   * @param fullName Full name of the model. (required)
   * @param version Version number of the model version. (required)
   * @param updateModelVersion  (optional)
   * @return ModelVersionInfo
   * @throws ApiException if fails to make API call
   */
  public ModelVersionInfo updateModelVersion(String fullName, String version, UpdateModelVersion updateModelVersion) throws ApiException {
    ApiResponse<ModelVersionInfo> localVarResponse = updateModelVersionWithHttpInfo(fullName, version, updateModelVersion);
    return localVarResponse.getData();
  }

  /**
   * Update a model version
   * Updates the model version that matches the supplied name. 
   * @param fullName Full name of the model. (required)
   * @param version Version number of the model version. (required)
   * @param updateModelVersion  (optional)
   * @return ApiResponse&lt;ModelVersionInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelVersionInfo> updateModelVersionWithHttpInfo(String fullName, String version, UpdateModelVersion updateModelVersion) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateModelVersionRequestBuilder(fullName, version, updateModelVersion);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateModelVersion", localVarResponse);
        }
        return new ApiResponse<ModelVersionInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ModelVersionInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateModelVersionRequestBuilder(String fullName, String version, UpdateModelVersion updateModelVersion) throws ApiException {
    // verify the required parameter 'fullName' is set
    if (fullName == null) {
      throw new ApiException(400, "Missing the required parameter 'fullName' when calling updateModelVersion");
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      throw new ApiException(400, "Missing the required parameter 'version' when calling updateModelVersion");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/models/{full_name}/versions/{version}"
        .replace("{full_name}", ApiClient.urlEncode(fullName.toString()))
        .replace("{version}", ApiClient.urlEncode(version.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateModelVersion);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
