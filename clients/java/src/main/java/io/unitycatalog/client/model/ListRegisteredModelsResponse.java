/*
 * Unity Catalog API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.unitycatalog.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.unitycatalog.client.model.RegisteredModelInfo;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ListRegisteredModelsResponse
 */
@JsonPropertyOrder({
  ListRegisteredModelsResponse.JSON_PROPERTY_MODEL_VERSIONS,
  ListRegisteredModelsResponse.JSON_PROPERTY_NEXT_PAGE_TOKEN
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class ListRegisteredModelsResponse {
  public static final String JSON_PROPERTY_MODEL_VERSIONS = "model_versions";
  private List<RegisteredModelInfo> modelVersions = new ArrayList<>();

  public static final String JSON_PROPERTY_NEXT_PAGE_TOKEN = "next_page_token";
  private String nextPageToken;

  public ListRegisteredModelsResponse() { 
  }

  public ListRegisteredModelsResponse modelVersions(List<RegisteredModelInfo> modelVersions) {
    this.modelVersions = modelVersions;
    return this;
  }

  public ListRegisteredModelsResponse addModelVersionsItem(RegisteredModelInfo modelVersionsItem) {
    if (this.modelVersions == null) {
      this.modelVersions = new ArrayList<>();
    }
    this.modelVersions.add(modelVersionsItem);
    return this;
  }

   /**
   * An array of model information objects.
   * @return modelVersions
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODEL_VERSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RegisteredModelInfo> getModelVersions() {
    return modelVersions;
  }


  @JsonProperty(JSON_PROPERTY_MODEL_VERSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModelVersions(List<RegisteredModelInfo> modelVersions) {
    this.modelVersions = modelVersions;
  }


  public ListRegisteredModelsResponse nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    return this;
  }

   /**
   * Opaque token to retrieve the next page of results. Absent if there are no more pages. __page_token__ should be set to this value for the next request (for the next page of results). 
   * @return nextPageToken
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NEXT_PAGE_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNextPageToken() {
    return nextPageToken;
  }


  @JsonProperty(JSON_PROPERTY_NEXT_PAGE_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }


  /**
   * Return true if this ListRegisteredModelsResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListRegisteredModelsResponse listRegisteredModelsResponse = (ListRegisteredModelsResponse) o;
    return Objects.equals(this.modelVersions, listRegisteredModelsResponse.modelVersions) &&
        Objects.equals(this.nextPageToken, listRegisteredModelsResponse.nextPageToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modelVersions, nextPageToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListRegisteredModelsResponse {\n");
    sb.append("    modelVersions: ").append(toIndentedString(modelVersions)).append("\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `model_versions` to the URL query string
    if (getModelVersions() != null) {
      for (int i = 0; i < getModelVersions().size(); i++) {
        if (getModelVersions().get(i) != null) {
          joiner.add(getModelVersions().get(i).toUrlQueryString(String.format("%smodel_versions%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `next_page_token` to the URL query string
    if (getNextPageToken() != null) {
      joiner.add(String.format("%snext_page_token%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNextPageToken()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

