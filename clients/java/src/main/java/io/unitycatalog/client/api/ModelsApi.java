/*
 * Unity Catalog API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.unitycatalog.client.api;

import io.unitycatalog.client.ApiClient;
import io.unitycatalog.client.ApiException;
import io.unitycatalog.client.ApiResponse;
import io.unitycatalog.client.Pair;

import io.unitycatalog.client.model.CreateRegisteredModel;
import io.unitycatalog.client.model.ListRegisteredModelsResponse;
import io.unitycatalog.client.model.RegisteredModelInfo;
import io.unitycatalog.client.model.UpdateRegisteredModel;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class ModelsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ModelsApi() {
    this(new ApiClient());
  }

  public ModelsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create a model. WARNING: This API is experimental and will change in future versions. 
   * Creates a new model instance. WARNING: This API is experimental and will change in future versions. 
   * @param createRegisteredModel  (optional)
   * @return RegisteredModelInfo
   * @throws ApiException if fails to make API call
   */
  public RegisteredModelInfo createRegisteredModel(CreateRegisteredModel createRegisteredModel) throws ApiException {
    ApiResponse<RegisteredModelInfo> localVarResponse = createRegisteredModelWithHttpInfo(createRegisteredModel);
    return localVarResponse.getData();
  }

  /**
   * Create a model. WARNING: This API is experimental and will change in future versions. 
   * Creates a new model instance. WARNING: This API is experimental and will change in future versions. 
   * @param createRegisteredModel  (optional)
   * @return ApiResponse&lt;RegisteredModelInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RegisteredModelInfo> createRegisteredModelWithHttpInfo(CreateRegisteredModel createRegisteredModel) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createRegisteredModelRequestBuilder(createRegisteredModel);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createRegisteredModel", localVarResponse);
        }
        return new ApiResponse<RegisteredModelInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RegisteredModelInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createRegisteredModelRequestBuilder(CreateRegisteredModel createRegisteredModel) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/models";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createRegisteredModel);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get a model
   * Gets a model for a specific catalog and schema. 
   * @param fullName Full name of the model. (required)
   * @return RegisteredModelInfo
   * @throws ApiException if fails to make API call
   */
  public RegisteredModelInfo getRegisteredModel(String fullName) throws ApiException {
    ApiResponse<RegisteredModelInfo> localVarResponse = getRegisteredModelWithHttpInfo(fullName);
    return localVarResponse.getData();
  }

  /**
   * Get a model
   * Gets a model for a specific catalog and schema. 
   * @param fullName Full name of the model. (required)
   * @return ApiResponse&lt;RegisteredModelInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RegisteredModelInfo> getRegisteredModelWithHttpInfo(String fullName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRegisteredModelRequestBuilder(fullName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRegisteredModel", localVarResponse);
        }
        return new ApiResponse<RegisteredModelInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RegisteredModelInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRegisteredModelRequestBuilder(String fullName) throws ApiException {
    // verify the required parameter 'fullName' is set
    if (fullName == null) {
      throw new ApiException(400, "Missing the required parameter 'fullName' when calling getRegisteredModel");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/models/{full_name}"
        .replace("{full_name}", ApiClient.urlEncode(fullName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List models
   * Gets the list of all available models under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. 
   * @param catalogName Name of parent catalog for models of interest. (required)
   * @param schemaName Name of parent schema for models of interest. (required)
   * @param maxResults Maximum number of models to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  (optional)
   * @param pageToken Opaque token to send for the next page of results (pagination). (optional)
   * @return ListRegisteredModelsResponse
   * @throws ApiException if fails to make API call
   */
  public ListRegisteredModelsResponse listRegisteredModels(String catalogName, String schemaName, Integer maxResults, String pageToken) throws ApiException {
    ApiResponse<ListRegisteredModelsResponse> localVarResponse = listRegisteredModelsWithHttpInfo(catalogName, schemaName, maxResults, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List models
   * Gets the list of all available models under the parent catalog and schema. There is no guarantee of a specific ordering of the elements in the array. 
   * @param catalogName Name of parent catalog for models of interest. (required)
   * @param schemaName Name of parent schema for models of interest. (required)
   * @param maxResults Maximum number of models to return. - when set to a value greater than 0, the page length is the minimum of this value and a server configured value; - when set to 0, the page length is set to a server configured value; - when set to a value less than 0, an invalid parameter error is returned;  (optional)
   * @param pageToken Opaque token to send for the next page of results (pagination). (optional)
   * @return ApiResponse&lt;ListRegisteredModelsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListRegisteredModelsResponse> listRegisteredModelsWithHttpInfo(String catalogName, String schemaName, Integer maxResults, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listRegisteredModelsRequestBuilder(catalogName, schemaName, maxResults, pageToken);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listRegisteredModels", localVarResponse);
        }
        return new ApiResponse<ListRegisteredModelsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListRegisteredModelsResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listRegisteredModelsRequestBuilder(String catalogName, String schemaName, Integer maxResults, String pageToken) throws ApiException {
    // verify the required parameter 'catalogName' is set
    if (catalogName == null) {
      throw new ApiException(400, "Missing the required parameter 'catalogName' when calling listRegisteredModels");
    }
    // verify the required parameter 'schemaName' is set
    if (schemaName == null) {
      throw new ApiException(400, "Missing the required parameter 'schemaName' when calling listRegisteredModels");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/models";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "catalog_name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("catalog_name", catalogName));
    localVarQueryParameterBaseName = "schema_name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("schema_name", schemaName));
    localVarQueryParameterBaseName = "max_results";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_results", maxResults));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a model
   * Updates the model that matches the supplied name. 
   * @param fullName Full name of the model. (required)
   * @param updateRegisteredModel  (optional)
   * @return RegisteredModelInfo
   * @throws ApiException if fails to make API call
   */
  public RegisteredModelInfo updateRegisteredModel(String fullName, UpdateRegisteredModel updateRegisteredModel) throws ApiException {
    ApiResponse<RegisteredModelInfo> localVarResponse = updateRegisteredModelWithHttpInfo(fullName, updateRegisteredModel);
    return localVarResponse.getData();
  }

  /**
   * Update a model
   * Updates the model that matches the supplied name. 
   * @param fullName Full name of the model. (required)
   * @param updateRegisteredModel  (optional)
   * @return ApiResponse&lt;RegisteredModelInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RegisteredModelInfo> updateRegisteredModelWithHttpInfo(String fullName, UpdateRegisteredModel updateRegisteredModel) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateRegisteredModelRequestBuilder(fullName, updateRegisteredModel);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateRegisteredModel", localVarResponse);
        }
        return new ApiResponse<RegisteredModelInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RegisteredModelInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateRegisteredModelRequestBuilder(String fullName, UpdateRegisteredModel updateRegisteredModel) throws ApiException {
    // verify the required parameter 'fullName' is set
    if (fullName == null) {
      throw new ApiException(400, "Missing the required parameter 'fullName' when calling updateRegisteredModel");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/models/{full_name}"
        .replace("{full_name}", ApiClient.urlEncode(fullName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateRegisteredModel);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
